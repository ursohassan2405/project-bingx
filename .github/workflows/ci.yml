name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short --junitxml=junit/test-results-${{ matrix.python-version }}.xml
    
    - name: Generate coverage report
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      if: always()

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security check with bandit
      run: |
        bandit -r . -ll -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
      if: always()

  integration:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
    
    - name: Test API endpoints
      run: |
        python -m pytest tests/integration/test_api_endpoints.py -v

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Run performance tests
      run: |
        pytest tests/ -k "benchmark" --benchmark-only --benchmark-json=benchmark.json
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
      if: always()

  build:
    needs: [test, security, integration]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test application startup
      run: |
        timeout 30s python main.py || [ $? -eq 124 ]
    
    - name: Health check
      run: |
        python -c "
        import asyncio
        import aiohttp
        import time
        
        async def health_check():
            # Start the server in background
            import subprocess
            import signal
            
            # Test basic imports
            try:
                from main import app
                from core.trading_engine import TradingEngine
                from core.exchange_manager import BingXExchangeManager
                print('✓ All imports successful')
            except Exception as e:
                print(f'✗ Import error: {e}')
                return False
            
            return True
        
        result = asyncio.run(health_check())
        exit(0 if result else 1)
        "

  notify:
    needs: [test, security, integration, performance, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.integration.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All CI checks passed!"
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.integration.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Some CI checks failed!"
        echo "Test: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Build: ${{ needs.build.result }}"